<div class="d-flex flex-column">
    @if (GameOver)
    {
        @if (FullBoardNoWinner)
        {
            <h3>No winner this time!</h3>
        }
        else
        {
            <h3>The Winner Is: @(isXTurn ? "X" : "O")</h3>
        }
    }
    else
    {
        <h3>The current turn is: @(isXTurn ? "X" : "O")</h3>
    }

    <div class="d-flex">
        <div class="d-flex flex-column">
            <Board Values="CurrentValues" ClickHandler="HandleClick" />
            <button @onclick="ResetBoard" class="btn btn-primary">@(GameOver ? "Play Again?" : "Reset Board")</button>
        </div>
        <div class="d-flex flex-column">
            @for (var i = 1; i < History.Count; i++)
            {
                int link = i;
                <button @onclick="() => GoToMove(link)" class="btn btn-secondary m-1">Go to Move #@(i)</button>
            }
        </div>
    </div>
</div>


@code 
{

    IList<string[]> History { get; set; }

    public string[] CurrentValues { get; set; }

    public bool isXTurn { get; set; } = true;

    public bool GameOver { get; set; }

    public bool FullBoardNoWinner { get; set; }

    public int MoveCounter { get; set; }

    protected override void OnInitialized()
    {
        ResetBoard();
    }

    void HandleClick(int index)
    {
        if (!GameOver && CurrentValues[index].Equals(""))
        {
            CurrentValues[index] = isXTurn ? "X" : "O";

            if(History.Count == MoveCounter)
            {
                History.Add(GetCopyOf(CurrentValues));
            }
            else
            {
                History[MoveCounter] = GetCopyOf(CurrentValues);

                var newHistory = new List<string[]>();
                for (var i = 0; i <= MoveCounter; i++)
                {
                    newHistory.Add(History[i]);
                }
                History = newHistory;
            }

            MoveCounter++;

            GameOver = CheckForWin();
            if (!GameOver)
            {
                SwapTurns();
            }
        }
    }

    private void SwapTurns()
    {
        isXTurn = !isXTurn;
    }

    private void ResetBoard()
    {
        isXTurn = true;
        GameOver = false;
        FullBoardNoWinner = false;
        ResetValues();

        History = new List<string[]>();
        History.Add(GetCopyOf(CurrentValues));
        MoveCounter = 1;
    }

    private void ResetValues()
    {
        CurrentValues = new string[9] {
            "", "", "",
            "", "", "",
            "", "", ""
        };
    }

    private bool CheckForWin()
    {
        // Check for wins
        if (CheckRow(CurrentValues[0], CurrentValues[1], CurrentValues[2]) || // Rows
            CheckRow(CurrentValues[3], CurrentValues[4], CurrentValues[5]) ||
            CheckRow(CurrentValues[6], CurrentValues[7], CurrentValues[8]) ||
            CheckRow(CurrentValues[0], CurrentValues[3], CurrentValues[6]) || // Columns
            CheckRow(CurrentValues[1], CurrentValues[4], CurrentValues[7]) ||
            CheckRow(CurrentValues[2], CurrentValues[5], CurrentValues[8]) ||
            CheckRow(CurrentValues[0], CurrentValues[4], CurrentValues[8]) || // Diagonals
            CheckRow(CurrentValues[2], CurrentValues[4], CurrentValues[6]))
        {
            FullBoardNoWinner = false;
            return true;
        }
        else if (!CurrentValues.Any(v => v.Equals("")))
        {
            FullBoardNoWinner = true;
            return true;
        }
        else
        {
            return false;
        }
    }

    private bool CheckRow(string a, string b, string c)
    {
        return (!(a.Equals("") || b.Equals("") || c.Equals(""))) && a.Equals(b) && b.Equals(c);
    }

    private void GoToMove(int index)
    {
        CurrentValues = GetCopyOf(History[index]);
        MoveCounter = index + 1;
        isXTurn = MoveCounter % 2 != 0;

        GameOver = CheckForWin();

        // If the move was a winning move, the winner was actually the previous mover.
        if (GameOver)
        {
            isXTurn = !isXTurn;
        }
    }

    private string[] GetCopyOf(string[] values)
    {
        var valuesCopy = new string[9];
        for (var i = 0; i < 9; i++)
        {
            valuesCopy[i] = new string(values[i]);
        }
        return valuesCopy;
    }

}
